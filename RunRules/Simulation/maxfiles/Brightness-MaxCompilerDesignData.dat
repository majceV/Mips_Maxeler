#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        1
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          44944
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-08-07"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Brightness"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/Brightness_MAX2C_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160111
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 40)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 8)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX24412C")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "BrightnessKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(BrightnessKernel, Kernel)
MANAGER_NODE(inImage1, PCIe_From_Host)
MANAGER_NODE(inImage2, PCIe_From_Host)
MANAGER_NODE(inImage3, PCIe_From_Host)
MANAGER_NODE(outImage1, PCIe_To_Host)
MANAGER_NODE(outImage2, PCIe_To_Host)
MANAGER_NODE(outImage3, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_7, DualAspectMux)
MANAGER_NODE(Stream_12, DualAspectReg)
MANAGER_NODE(Stream_15, DualAspectReg)
MANAGER_NODE(Stream_18, DualAspectReg)
MANAGER_NODE(Stream_34, StreamPullPushAdapter)
MANAGER_NODE(Stream_38, StreamPullPushAdapter)
MANAGER_NODE(Stream_42, StreamPullPushAdapter)
MANAGER_NODE(Stream_20, Fifo)
MANAGER_NODE(Stream_24, Fifo)
MANAGER_NODE(Stream_28, Fifo)
MANAGER_NODE(Stream_22, Fifo)
MANAGER_NODE(Stream_26, Fifo)
MANAGER_NODE(Stream_30, Fifo)
MANAGER_NODE(Stream_32, Fifo)
MANAGER_NODE(Stream_36, Fifo)
MANAGER_NODE(Stream_40, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(BrightnessKernel, inImage1, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(BrightnessKernel, inImage2, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(BrightnessKernel, inImage3, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(BrightnessKernel, outImage1, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(BrightnessKernel, outImage2, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(BrightnessKernel, outImage3, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inImage1, inImage1, OUT, PCIE, 64, PUSH)
MANAGER_NODE_IO(inImage2, inImage2, OUT, PCIE, 64, PUSH)
MANAGER_NODE_IO(inImage3, inImage3, OUT, PCIE, 64, PUSH)
MANAGER_NODE_IO(outImage1, outImage1, IN, PCIE, 64, PUSH)
MANAGER_NODE_IO(outImage2, outImage2, IN, PCIE, 64, PUSH)
MANAGER_NODE_IO(outImage3, outImage3, IN, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_4, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_7, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_7, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_12, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_15, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_15, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_18, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_18, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_34, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_34, output, OUT, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_38, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_38, output, OUT, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_42, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_42, output, OUT, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_20, input, IN, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_20, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_24, input, IN, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_24, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_28, input, IN, PCIE, 64, PUSH)
MANAGER_NODE_IO(Stream_28, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_22, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_22, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_26, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_26, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_30, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_30, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_32, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_32, output, OUT, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_36, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_36, output, OUT, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_40, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_40, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inImage1, inImage1, Stream_20, input, 64)
MANAGER_STREAM(inImage2, inImage2, Stream_24, input, 64)
MANAGER_STREAM(inImage3, inImage3, Stream_28, input, 64)
MANAGER_STREAM(BrightnessKernel, outImage1, Stream_32, input, 32)
MANAGER_STREAM(BrightnessKernel, outImage2, Stream_36, input, 32)
MANAGER_STREAM(BrightnessKernel, outImage3, Stream_40, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_22, input, 32)
MANAGER_STREAM(Stream_4, output, Stream_26, input, 32)
MANAGER_STREAM(Stream_7, output, Stream_30, input, 32)
MANAGER_STREAM(Stream_12, output, Stream_34, input, 64)
MANAGER_STREAM(Stream_15, output, Stream_38, input, 64)
MANAGER_STREAM(Stream_18, output, Stream_42, input, 64)
MANAGER_STREAM(Stream_34, output, outImage1, outImage1, 64)
MANAGER_STREAM(Stream_38, output, outImage2, outImage2, 64)
MANAGER_STREAM(Stream_42, output, outImage3, outImage3, 64)
MANAGER_STREAM(Stream_20, output, Stream_1, input, 64)
MANAGER_STREAM(Stream_24, output, Stream_4, input, 64)
MANAGER_STREAM(Stream_28, output, Stream_7, input, 64)
MANAGER_STREAM(Stream_22, output, BrightnessKernel, inImage1, 32)
MANAGER_STREAM(Stream_26, output, BrightnessKernel, inImage2, 32)
MANAGER_STREAM(Stream_30, output, BrightnessKernel, inImage3, 32)
MANAGER_STREAM(Stream_32, output, Stream_12, input, 32)
MANAGER_STREAM(Stream_36, output, Stream_15, input, 32)
MANAGER_STREAM(Stream_40, output, Stream_18, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(BrightnessKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(inImage1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(inImage2, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(inImage3, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(outImage1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(outImage2, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(outImage3, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_7, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_15, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_18, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_34, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_38, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_42, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_20, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_24, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_22, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_26, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_30, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_32, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_36, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
MANAGER_NODE_STACK_TRACE(Stream_40, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(BrightnessKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(BrightnessKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(BrightnessKernel, BrightnessKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(BrightnessKernel, inImage1, 0)
DEBUG_INPUT_BITS(BrightnessKernel, inImage2, 1)
DEBUG_INPUT_BITS(BrightnessKernel, inImage3, 2)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(BrightnessKernel, outImage1, 0)
DEBUG_OUTPUT_BITS(BrightnessKernel, outImage2, 1)
DEBUG_OUTPUT_BITS(BrightnessKernel, outImage3, 2)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage1, PCIePushSourceSync, "inImage1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage2, PCIePushSourceSync, "inImage2")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage3, PCIePushSourceSync, "inImage3")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_20, FifoPushToPullSync, "Stream_20", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_24, FifoPushToPullSync, "Stream_24", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, FifoPushToPullSync, "Stream_28", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 32, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_7, DualAspectMuxSync, "Stream_7", 32, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_22, FifoPushToPullSync, "Stream_22", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_26, FifoPushToPullSync, "Stream_26", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_30, FifoPushToPullSync, "Stream_30", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(BrightnessKernel, BrightnessKernel, "BrightnessKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_32, FifoPushToPullSync, "Stream_32", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_36, FifoPushToPullSync, "Stream_36", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_40, FifoPushToPullSync, "Stream_40", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, DualAspectRegSync, "Stream_12", 32, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_15, DualAspectRegSync, "Stream_15", 32, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_18, DualAspectRegSync, "Stream_18", 32, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_34, PullToPushAdapterSync, "Stream_34")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_38, PullToPushAdapterSync, "Stream_38")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_42, PullToPushAdapterSync, "Stream_42")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage1, PCIePushSinkSync, "outImage1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage2, PCIePushSinkSync, "outImage2")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage3, PCIePushSinkSync, "outImage3")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 3, 3, 0, 0, 0, 0, 0, 40)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "c5d949d893c74fcd75322989a4abfc100685f770910090f24dfdfac7bdef261f")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_ctld_done, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_ctld_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_ctld_read, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_ctld_request, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_fill_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_flush_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_flush_start_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_full_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_out_stall, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_out_valid, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(BrightnessKernel, addDebugRegister, reg_dbg_stall_vector, 3, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inImage1, STREAM_FROM_HOST, 0)
PCIE_STREAM(inImage2, STREAM_FROM_HOST, 1)
PCIE_STREAM(inImage3, STREAM_FROM_HOST, 2)
PCIE_STREAM(outImage1, STREAM_TO_HOST, 0)
PCIE_STREAM(outImage2, STREAM_TO_HOST, 1)
PCIE_STREAM(outImage3, STREAM_TO_HOST, 2)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(BrightnessKernel.io_inImage1_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessKernel.io_inImage2_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessKernel.io_inImage3_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessKernel.io_outImage1_force_disabled, 0x3, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessKernel.io_outImage2_force_disabled, 0x4, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessKernel.io_outImage3_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(BrightnessKernel.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(BrightnessKernel.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(BrightnessKernel.dbg_ctld_almost_empty, 0x12, 1, hwBits(3))
REG(BrightnessKernel.dbg_ctld_done, 0x13, 1, hwBits(3))
REG(BrightnessKernel.dbg_ctld_empty, 0x14, 1, hwBits(3))
REG(BrightnessKernel.dbg_ctld_read, 0x15, 1, hwBits(3))
REG(BrightnessKernel.dbg_ctld_read_pipe_dbg, 0x16, 2, hwBits(9))
REG(BrightnessKernel.dbg_ctld_request, 0x18, 1, hwBits(3))
REG(BrightnessKernel.dbg_done_out, 0x19, 1, hwBits(1))
REG(BrightnessKernel.dbg_fill_level, 0x1a, 1, hwBits(4))
REG(BrightnessKernel.dbg_flush_level, 0x1b, 1, hwBits(4))
REG(BrightnessKernel.dbg_flush_start, 0x1c, 1, hwBits(1))
REG(BrightnessKernel.dbg_flush_start_level, 0x1d, 1, hwBits(4))
REG(BrightnessKernel.dbg_flushing, 0x1e, 1, hwBits(1))
REG(BrightnessKernel.dbg_full_level, 0x1f, 1, hwBits(4))
REG(BrightnessKernel.dbg_out_stall, 0x20, 1, hwBits(3))
REG(BrightnessKernel.dbg_out_valid, 0x21, 1, hwBits(3))
REG(BrightnessKernel.dbg_stall_vector, 0x22, 1, hwBits(3))
REG(ifpga.ifpga_ctrl, 0x23, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x24, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(BrightnessKernel.io_inImage1_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessKernel.io_inImage2_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessKernel.io_inImage3_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessKernel.io_outImage1_force_disabled, 0x3, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessKernel.io_outImage2_force_disabled, 0x4, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessKernel.io_outImage3_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(BrightnessKernel.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(BrightnessKernel.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_ctld_almost_empty, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_ctld_done, 0x13, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_ctld_empty, 0x14, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_ctld_read, 0x15, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_ctld_read_pipe_dbg, 0x16, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_ctld_request, 0x18, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_done_out, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_fill_level, 0x1a, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_flush_level, 0x1b, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_flush_start, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_flush_start_level, 0x1d, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_flushing, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_full_level, 0x1f, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_out_stall, 0x20, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_out_valid, 0x21, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(BrightnessKernel.dbg_stall_vector, 0x22, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x23, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x24, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("c5d949d893c74fcd75322989a4abfc100685f770910090f24dfdfac7bdef261f")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX2REV, MAX2REVC)
CAPABILITY(MAX2RAM, DDR2_24GB)
CAPABILITY(MAX2FPGA, SXT240_2C)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Brightness
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Brightness_H
#define SLIC_DECLARATIONS_Brightness_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Brightness_PCIE_ALIGNMENT (8)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_inImage1 The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_inImage2 The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_inImage3 The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage1 The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage2 The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage3 The stream should be of size (param_N * 4) bytes.
 */
void Brightness(
	int32_t param_N,
	const int32_t *instream_inImage1,
	const int32_t *instream_inImage2,
	const int32_t *instream_inImage3,
	int32_t *outstream_outImage1,
	int32_t *outstream_outImage2,
	int32_t *outstream_outImage3);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_inImage1 The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_inImage2 The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_inImage3 The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage1 The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage2 The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_outImage3 The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Brightness_nonblock(
	int32_t param_N,
	const int32_t *instream_inImage1,
	const int32_t *instream_inImage2,
	const int32_t *instream_inImage3,
	int32_t *outstream_outImage1,
	int32_t *outstream_outImage2,
	int32_t *outstream_outImage3);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const int32_t *instream_inImage1; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	const int32_t *instream_inImage2; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	const int32_t *instream_inImage3; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_outImage1; /**<  [out] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_outImage2; /**<  [out] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_outImage3; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} Brightness_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Brightness_run(
	max_engine_t *engine,
	Brightness_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Brightness_run_nonblock(
	max_engine_t *engine,
	Brightness_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Brightness_run_group(max_group_t *group, Brightness_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Brightness_run_group_nonblock(max_group_t *group, Brightness_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Brightness_run_array(max_engarray_t *engarray, Brightness_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Brightness_run_array_nonblock(max_engarray_t *engarray, Brightness_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Brightness_convert(max_file_t *maxfile, Brightness_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Brightness_init(void);

/* Error handling functions */
int Brightness_has_errors(void);
const char* Brightness_get_errors(void);
void Brightness_clear_errors(void);
/* Free statically allocated maxfile data */
void Brightness_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Brightness_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Brightness_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Brightness_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(BrightnessKernel, 46, NodeInputMappedReg, "Scalar input (io_outImage1_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:29)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 47, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:29)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 0, NodeInputMappedReg, "Scalar input (io_inImage1_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:16)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:16)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 2, NodeInput, "Input(inImage1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:16)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 91, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000032; 50.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 10, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 90, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 12, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 15, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1165)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 89, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000032; 50.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 14, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 72, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 16, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1165)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:22)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 88, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:23)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 18, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:23)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 73, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 19, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:23)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 20, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:23)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 49, NodeOutput, "Output(outImage1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:29)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 51, NodeInputMappedReg, "Scalar input (io_outImage2_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:30)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 52, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:30)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 3, NodeInputMappedReg, "Scalar input (io_inImage2_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:17)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 4, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:17)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 5, NodeInput, "Input(inImage2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:17)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 87, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000032; 50.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 22, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 86, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 24, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 27, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1165)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 85, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000032; 50.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 26, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 74, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 28, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1165)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:24)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 84, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:25)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 30, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:25)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 75, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 31, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:25)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 32, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:25)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 54, NodeOutput, "Output(outImage2)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:30)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 56, NodeInputMappedReg, "Scalar input (io_outImage3_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:31)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 57, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:31)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 6, NodeInputMappedReg, "Scalar input (io_inImage3_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:18)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 7, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:18)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 8, NodeInput, "Input(inImage3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:18)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 83, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000032; 50.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 34, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 82, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 36, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 39, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1165)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 81, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000032; 50.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 38, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 76, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 40, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1165)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:26)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 80, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:27)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 42, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:837)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:27)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 77, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 43, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:27)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 44, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:27)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 59, NodeOutput, "Output(outImage3)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nbrightness.BrightnessKernel.<init>(BrightnessKernel.maxj:31)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:13)\n")
PHOTON_NODE_DATA(BrightnessKernel, 64, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 79, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 61, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 62, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 63, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 65, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 78, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 67, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 68, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 70, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 71, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
PHOTON_NODE_DATA(BrightnessKernel, 69, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:362)\nbrightness.BrightnessManager.main(BrightnessManager.maxj:17)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Brightness_has_errors(void)
{	return stored_has_error; }
const char* Brightness_get_errors(void)
{	return stored_error; }
void Brightness_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Brightness_use_simulation[16];
static void Brightness_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Brightness_use_simulation, 16, "Brightne_%05ld_", pid);
}
static const char *Brightness_check_use_simulation(void)
{
	Brightness_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Brightness_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Brightness_simulation_launch = 0;
int Brightness_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Brightness_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX24412C -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Brightness_simulator_stop(void)
{
	const char *use_sim = Brightness_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX24412C -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Brightness_static_init(void) 
{
	stored_maxfile = Brightness_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Brightness_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Brightness_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Brightness_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Brightness_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Brightness_simulation_launch == 1) {
		int sim_stat = Brightness_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Brightness_simulation_launch = 0;
	}
}

static int Brightness_get_pcie_alignment(void)
{
#ifdef Brightness_PCIE_ALIGNMENT
	return ((Brightness_PCIE_ALIGNMENT < 1) ? 16 : Brightness_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Brightness_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Brightness_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Brightness_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Brightness_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Brightness_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Brightness_callback_stream_t;

typedef struct Brightness_callback_data {
	Brightness_callback_stream_t stream[6]; 
	int count;
	int max_count;
} Brightness_callback_data_t;

static void Brightness_callback_internal(void *cb_data)
{
	Brightness_callback_data_t *data = (Brightness_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Brightness_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Brightness_convert_internal(
	max_file_t *maxfile,
	Brightness_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Brightness_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Brightness_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Brightness_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 6;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Brightness_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar BrightnessKernel.run_cycle_count */
	uint64_t ticks_BrightnessKernel = param_N;
	max_set_ticks(actions, "BrightnessKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar BrightnessKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream inImage1 */
	size_t instream_size_inImage1 = tmp_0;
	if (instream_size_inImage1 > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage1;
		if (use_callback && (1 == Brightness_check_aligned(interface_actions->instream_inImage1))) {
			int32_t *aligned_instream_inImage1 = malloc(instream_size_inImage1);
			if (aligned_instream_inImage1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage1;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage1;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage1, interface_actions->instream_inImage1, instream_size_inImage1);
			stream_ptr = aligned_instream_inImage1;
		}
		max_queue_input(actions, "inImage1", stream_ptr, instream_size_inImage1);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage1 */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream inImage2 */
	size_t instream_size_inImage2 = tmp_1;
	if (instream_size_inImage2 > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage2;
		if (use_callback && (1 == Brightness_check_aligned(interface_actions->instream_inImage2))) {
			int32_t *aligned_instream_inImage2 = malloc(instream_size_inImage2);
			if (aligned_instream_inImage2 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage2'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage2;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage2;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage2;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage2, interface_actions->instream_inImage2, instream_size_inImage2);
			stream_ptr = aligned_instream_inImage2;
		}
		max_queue_input(actions, "inImage2", stream_ptr, instream_size_inImage2);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage2 */
	
	int64_t tmp_2 = (param_N * 4);
	
	/* code for stream inImage3 */
	size_t instream_size_inImage3 = tmp_2;
	if (instream_size_inImage3 > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage3;
		if (use_callback && (1 == Brightness_check_aligned(interface_actions->instream_inImage3))) {
			int32_t *aligned_instream_inImage3 = malloc(instream_size_inImage3);
			if (aligned_instream_inImage3 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage3'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage3;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage3;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage3;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage3, interface_actions->instream_inImage3, instream_size_inImage3);
			stream_ptr = aligned_instream_inImage3;
		}
		max_queue_input(actions, "inImage3", stream_ptr, instream_size_inImage3);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage3 */
	
	int64_t tmp_3 = (param_N * 4);
	
	/* code for stream outImage1 */
	size_t outstream_size_outImage1 = tmp_3;
	if (outstream_size_outImage1 > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage1;
		if (use_callback && (1 == Brightness_check_aligned(interface_actions->outstream_outImage1))) {
			int32_t *aligned_outstream_outImage1 = malloc(outstream_size_outImage1);
			if (aligned_outstream_outImage1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage1;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage1;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage1;
		}
		max_queue_output(actions, "outImage1", stream_ptr, outstream_size_outImage1);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage1 */
	
	int64_t tmp_4 = (param_N * 4);
	
	/* code for stream outImage2 */
	size_t outstream_size_outImage2 = tmp_4;
	if (outstream_size_outImage2 > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage2;
		if (use_callback && (1 == Brightness_check_aligned(interface_actions->outstream_outImage2))) {
			int32_t *aligned_outstream_outImage2 = malloc(outstream_size_outImage2);
			if (aligned_outstream_outImage2 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage2'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage2;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage2;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage2;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage2;
		}
		max_queue_output(actions, "outImage2", stream_ptr, outstream_size_outImage2);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage2 */
	
	int64_t tmp_5 = (param_N * 4);
	
	/* code for stream outImage3 */
	size_t outstream_size_outImage3 = tmp_5;
	if (outstream_size_outImage3 > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage3;
		if (use_callback && (1 == Brightness_check_aligned(interface_actions->outstream_outImage3))) {
			int32_t *aligned_outstream_outImage3 = malloc(outstream_size_outImage3);
			if (aligned_outstream_outImage3 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage3'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage3;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage3;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage3;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage3;
		}
		max_queue_output(actions, "outImage3", stream_ptr, outstream_size_outImage3);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage3 */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Brightness(
	int32_t param_N,
	const int32_t *instream_inImage1,
	const int32_t *instream_inImage2,
	const int32_t *instream_inImage3,
	int32_t *outstream_outImage1,
	int32_t *outstream_outImage2,
	int32_t *outstream_outImage3)
{
	(void) pthread_once(&slic_bs_is_initialised, Brightness_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Brightness_nonblock(param_N, instream_inImage1, instream_inImage2, instream_inImage3, outstream_outImage1, outstream_outImage2, outstream_outImage3);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Brightness_nonblock(
	int32_t param_N,
	const int32_t *instream_inImage1,
	const int32_t *instream_inImage2,
	const int32_t *instream_inImage3,
	int32_t *outstream_outImage1,
	int32_t *outstream_outImage2,
	int32_t *outstream_outImage3)
{
	Brightness_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_inImage1 = instream_inImage1;
	interface_actions.instream_inImage2 = instream_inImage2;
	interface_actions.instream_inImage3 = instream_inImage3;
	interface_actions.outstream_outImage1 = outstream_outImage1;
	interface_actions.outstream_outImage2 = outstream_outImage2;
	interface_actions.outstream_outImage3 = outstream_outImage3;
	(void) pthread_once(&slic_bs_is_initialised, Brightness_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Brightness_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Brightness_run(
	max_engine_t *engine,
	Brightness_actions_t *interface_actions)
{
	max_run_t *run = Brightness_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Brightness_run_nonblock(
	max_engine_t *engine,
	Brightness_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Brightness_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Brightness_run_group(max_group_t *group, Brightness_actions_t *interface_actions)
{
	max_run_t *run = Brightness_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Brightness_run_group_nonblock(max_group_t *group, Brightness_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Brightness_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Brightness_run_array(max_engarray_t *engarray, Brightness_actions_t *interface_actions[])
{
	max_run_t *run = Brightness_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Brightness_run_array_nonblock(max_engarray_t *engarray, Brightness_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Brightness_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Brightness_convert(max_file_t *maxfile, Brightness_actions_t *interface_actions)
{
	return Brightness_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(BrightnessKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(inImage1, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(inImage2, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_N * 4);)	
SLIC_STREAM(inImage3, tmp_2)	
SLIC_TEMP_VAR(int64_t tmp_3 = (param_N * 4);)	
SLIC_STREAM(outImage1, tmp_3)	
SLIC_TEMP_VAR(int64_t tmp_4 = (param_N * 4);)	
SLIC_STREAM(outImage2, tmp_4)	
SLIC_TEMP_VAR(int64_t tmp_5 = (param_N * 4);)	
SLIC_STREAM(outImage3, tmp_5)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkJyaWdodG5lc3MuaCIgbmFt
ZT0iQnJpZ2h0bmVzcyI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBlPSJsb25n
IiB2YWx1ZT0iOCIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1lPSJC
cmlnaHRuZXNzIiByZXR1cm4tdmFsdWU9InZvaWQiPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBh
cmFtZXRlciAmcXVvdDtOJnF1b3Q7LjogTnVtYmVyIG9mIGRhdGEgaXRlbXMgdG8gcHJvY2VzcyIg
ZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1fTiIgdHlwZT0iaW50MzJfdCIvPjxhcnJheSBk
ZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9pbkltYWdlMSIgc2l6ZT0iKHBhcmFtX04g
KiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIw
Ij48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2
YWx1ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0
b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJw
YXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwv
ZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRv
cj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNj
PSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJl
Y3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9pbkltYWdlMiIgc2l6ZT0iKHBhcmFtX04gKiA0
KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48
bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1
ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Ig
b3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJh
bV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVu
Y3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48
L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJU
aGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rp
b249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9pbkltYWdlMyIgc2l6ZT0iKHBhcmFtX04gKiA0KSIg
dHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVu
Z3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0i
KChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3Bl
cmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9O
Ii8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rp
b25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUg
c3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249
Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291dEltYWdlMSIgc2l6ZT0iKHBhcmFtX04gKiA0KSIg
dHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVu
Z3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0i
KChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3Bl
cmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9O
Ii8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rp
b25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUg
c3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249
Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291dEltYWdlMiIgc2l6ZT0iKHBhcmFtX04gKiA0KSIg
dHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVu
Z3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0i
KChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3Bl
cmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9O
Ii8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rp
b25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUg
c3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249
Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291dEltYWdlMyIgc2l6ZT0iKHBhcmFtX04gKiA0KSIg
dHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVu
Z3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0i
KChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3Bl
cmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9O
Ii8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rp
b25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjwvZnVuY3Rpb24+PC9lbmdp
bmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBCcmlnaHRuZXNzX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hhc19l
cnJvcjsgfQpjb25zdCBjaGFyKiBCcmlnaHRuZXNzX2dldF9lcnJvcnModm9pZCkKewlyZXR1cm4g
c3RvcmVkX2Vycm9yOyB9CnZvaWQgQnJpZ2h0bmVzc19jbGVhcl9lcnJvcnModm9pZCkKewoJZnJl
ZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3Ig
PSAwOwp9CgpzdGF0aWMgY2hhciBCcmlnaHRuZXNzX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGlj
IHZvaWQgQnJpZ2h0bmVzc19kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAo
KGxvbmcpIGdldHBpZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKEJyaWdodG5lc3NfdXNlX3NpbXVs
YXRpb24sIDE2LCAiQnJpZ2h0bmVfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAq
QnJpZ2h0bmVzc19jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglCcmlnaHRuZXNzX2RlZl91
c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IG1heF9jb25maWdfZ2V0X3N0
cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsKCWlmICh1c2Vfc2ltID09IE5VTEwpIHsK
CQl1c2Vfc2ltID0gQnJpZ2h0bmVzc191c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9z
dHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNl
X3NpbTsKfQoKc3RhdGljIGludCBCcmlnaHRuZXNzX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50
IEJyaWdodG5lc3Nfc2ltdWxhdG9yX3N0YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29u
c3QgY2hhciAqdXNlX3NpbSA9IEJyaWdodG5lc3NfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNo
YXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRI
IG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMjQ0MTJDIC1TIHNpbXV0aWxzIHJlc3Rh
cnQiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAiciIpOwoJaWYgKHBp
cGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0byBleGVjdXRlLiIs
ICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsK
CX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5j
b21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAqLwoJCS8qIGZwcmlu
dGYoc3RkZXJyLCBidWZmKTsgKi8KCQlpZiAoc3Ryc3RyKGJ1ZmYsICJFcnJvciIpKSB7CgkJCXNl
dF9lcnJvcihidWZmKTsKCQkJcmV0dmFsID0gLTE7CgkJfQoJfQoJcGNsb3NlKHBpcGVfZnApOwoJ
cmV0dXJuIHJldHZhbDsKfQoKaW50IEJyaWdodG5lc3Nfc2ltdWxhdG9yX3N0b3Aodm9pZCkKewoJ
Y29uc3QgY2hhciAqdXNlX3NpbSA9IEJyaWdodG5lc3NfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsK
CWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQ
QVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMjQ0MTJDIC1TIHNpbXV0aWxzIHN0
b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAiciIpOwoJaWYgKHBp
cGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0byBleGVjdXRlLiIs
ICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsK
CX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5j
b21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAqLwoJCS8qIGZwcmlu
dGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gMDsK
fQoKc3RhdGljIHZvaWQgQnJpZ2h0bmVzc19zdGF0aWNfaW5pdCh2b2lkKSAKewoJc3RvcmVkX21h
eGZpbGUgPSBCcmlnaHRuZXNzX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBOVUxMIHx8
ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5V
TEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0Vf
QUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBs
b2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxfZXJyb3Jz
KCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2dsb2JhbF9l
cnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05G
SUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19tb2RlKHN0
b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMgPSBtYXhf
bG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0g
QnJpZ2h0bmVzc19jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1vbihz
dG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IEJyaWdodG5l
c3Nfc2ltdWxhdG9yX3N0YXJ0KCk7CgkJaWYgKChzaW1fc3RhdCA9PSAwKSAmJiAobWF4X3Bpbmdf
ZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAxKSkgewoJCQlCcmlnaHRuZXNzX3Np
bXVsYXRpb25fbGF1bmNoID0gMTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBl
cnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFz
dHJ1Y3R1cmUgYXV0b21hdGljYWxseS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhh
dCAndXNlX3NpbXVsYXRpb249PHNpbXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5
b3VyIFNMaUMgY29uZmlndXJhdGlvbiIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0
aGUgYXNzb2NpYXRlZCBzaW11bGF0ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQlt
YXhfZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
CQlyZXR1cm47CgkJfQoJfQoJc3RvcmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxl
LCAiKiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhf
Y29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJP
UikpIHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRp
bmcgbm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsK
CQkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVy
cm9ycykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZp
bGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9t
YXhmaWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lkIEJyaWdodG5lc3NfZnJlZSh2b2lkKQp7
CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9hZChzdG9yZWRfZW5naW5l
KTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxM
KSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3RvcmVkX21heGZpbGUgPSBO
VUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJlZShzdG9yZWRfZXJyb3Ip
OwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoQnJpZ2h0bmVzc19zaW11bGF0aW9uX2xh
dW5jaCA9PSAxKSB7CgkJaW50IHNpbV9zdGF0ID0gQnJpZ2h0bmVzc19zaW11bGF0b3Jfc3RvcCgp
OwoJCWlmIChzaW1fc3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3Bw
aW5nIHNpbXVsYXRvci4iKTsKCQl9CgkJQnJpZ2h0bmVzc19zaW11bGF0aW9uX2xhdW5jaCA9IDA7
Cgl9Cn0KCnN0YXRpYyBpbnQgQnJpZ2h0bmVzc19nZXRfcGNpZV9hbGlnbm1lbnQodm9pZCkKewoj
aWZkZWYgQnJpZ2h0bmVzc19QQ0lFX0FMSUdOTUVOVAoJcmV0dXJuICgoQnJpZ2h0bmVzc19QQ0lF
X0FMSUdOTUVOVCA8IDEpID8gMTYgOiBCcmlnaHRuZXNzX1BDSUVfQUxJR05NRU5UKTsKI2Vsc2UK
CXJldHVybiAxNjsKI2VuZGlmCn0KCnN0YXRpYyBpbnQgQnJpZ2h0bmVzc19jaGVja19hbGlnbmVk
KGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJfdCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0
YTsKCWludCBhbGlnbm1lbnQgPSBCcmlnaHRuZXNzX2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0
dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9CgpzdGF0aWMgdm9pZCAqQnJpZ2h0
bmVzc19tYWxsb2NfYWxpZ25lZChjb25zdCBzaXplX3Qgc2l6ZSkKewoJdm9pZCAqcHRyOwoJaW50
IGFsaWdubWVudCA9IEJyaWdodG5lc3NfZ2V0X3BjaWVfYWxpZ25tZW50KCk7Cglwb3NpeF9tZW1h
bGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0cjsKfQoKCgovKi0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIGRl
ZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNULT5l
cnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3Jz
X3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVM
TChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29uZmln
X2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsg
ZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6
IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyBy
ZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IEJyaWdodG5lc3NfY2FsbGJhY2tfc3RyZWFt
IHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBz
aXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IEJyaWdodG5lc3NfY2FsbGJhY2tfc3RyZWFtX3Q7
Cgp0eXBlZGVmIHN0cnVjdCBCcmlnaHRuZXNzX2NhbGxiYWNrX2RhdGEgewoJQnJpZ2h0bmVzc19j
YWxsYmFja19zdHJlYW1fdCBzdHJlYW1bNl07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsK
fSBCcmlnaHRuZXNzX2NhbGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2b2lkIEJyaWdodG5lc3NfY2Fs
bGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJQnJpZ2h0bmVzc19jYWxsYmFja19kYXRh
X3QgKmRhdGEgPSAoQnJpZ2h0bmVzc19jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChp
bnQgaSA9IDAgOyBpIDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJQnJpZ2h0bmVzc19jYWxsYmFj
a19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAo
cy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMt
PnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0
YXRpYyBtYXhfYWN0aW9uc190KiBCcmlnaHRuZXNzX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmls
ZV90ICptYXhmaWxlLAoJQnJpZ2h0bmVzc19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJ
aW50ICBpc19pbnRlcm5hbF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2
b2lkICoqY2FsbGJhY2tfZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rp
b25zX2luaXQobWF4ZmlsZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxM
OwoKI2RlZmluZSBDSEVDS19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNl
dF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1
cm4gTlVMTDsgfSAKCglCcmlnaHRuZXNzX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7
CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNr
X2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhz
aXplb2YoQnJpZ2h0bmVzc19jYWxsYmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxM
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3Ry
ZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24gQnJpZ2h0bmVzc19jb252ZXJ0X2ludGVybmFs
XG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJfQoJCWNiX2RhdGEtPm1heF9jb3VudCA9IDY7CgkJY2Jf
ZGF0YS0+Y291bnQgICAgID0gMDsKCQkqY2FsbGJhY2tfZGF0YSAgICAgPSBjYl9kYXRhOwoJCSpj
YWxsYmFja19mdW5jICAgICA9ICZCcmlnaHRuZXNzX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWlu
dDMyX3QgcGFyYW1fTiA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9OOwoJCgkvKiBjb2RlIGZv
ciBzY2FsYXIgQnJpZ2h0bmVzc0tlcm5lbC5ydW5fY3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRp
Y2tzX0JyaWdodG5lc3NLZXJuZWwgPSBwYXJhbV9OOwoJbWF4X3NldF90aWNrcyhhY3Rpb25zLCAi
QnJpZ2h0bmVzc0tlcm5lbCIsIHBhcmFtX04pOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNv
ZGUgZm9yIHNjYWxhciBCcmlnaHRuZXNzS2VybmVsLnJ1bl9jeWNsZV9jb3VudCovCgkKCWludDY0
X3QgdG1wXzAgPSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gaW5JbWFnZTEg
Ki8KCXNpemVfdCBpbnN0cmVhbV9zaXplX2luSW1hZ2UxID0gdG1wXzA7CglpZiAoaW5zdHJlYW1f
c2l6ZV9pbkltYWdlMSA+IDApIHsKCQljb25zdCBpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX2luSW1hZ2UxOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEg
PT0gQnJpZ2h0bmVzc19jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9p
bkltYWdlMSkpKSB7CgkJCWludDMyX3QgKmFsaWduZWRfaW5zdHJlYW1faW5JbWFnZTEgPSBtYWxs
b2MoaW5zdHJlYW1fc2l6ZV9pbkltYWdlMSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2luSW1h
Z2UxID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMs
IF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVt
b3J5IGZvciBzdHJlYW0gJ2luSW1hZ2UxJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgm
Y2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3Qq
KSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5JbWFnZTE7CgkJCSgmY2JfZGF0YS0+c3Ry
ZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2lu
c3RyZWFtX2luSW1hZ2UxOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5z
aXplICAgICAgICA9IGluc3RyZWFtX3NpemVfaW5JbWFnZTE7CgkJCSgmY2JfZGF0YS0+c3RyZWFt
W2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0g
MTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1faW5JbWFnZTEsIGludGVyZmFjZV9hY3Rpb25z
LT5pbnN0cmVhbV9pbkltYWdlMSwgaW5zdHJlYW1fc2l6ZV9pbkltYWdlMSk7CgkJCXN0cmVhbV9w
dHIgPSBhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UxOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0
aW9ucywgImluSW1hZ2UxIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9pbkltYWdlMSk7CgkJ
Q0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBpbkltYWdlMSAqLwoJ
CglpbnQ2NF90IHRtcF8xID0gKHBhcmFtX04gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGlu
SW1hZ2UyICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pbkltYWdlMiA9IHRtcF8xOwoJaWYgKGlu
c3RyZWFtX3NpemVfaW5JbWFnZTIgPiAwKSB7CgkJY29uc3QgaW50MzJfdCAqc3RyZWFtX3B0ciA9
IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbkltYWdlMjsKCQlpZiAodXNlX2NhbGxiYWNr
ICYmICgxID09IEJyaWdodG5lc3NfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+aW5z
dHJlYW1faW5JbWFnZTIpKSkgewoJCQlpbnQzMl90ICphbGlnbmVkX2luc3RyZWFtX2luSW1hZ2Uy
ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfaW5JbWFnZTIpOwoJCQlpZiAoYWxpZ25lZF9pbnN0cmVh
bV9pbkltYWdlMiA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+
ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGln
bmVkIG1lbW9yeSBmb3Igc3RyZWFtICdpbkltYWdlMiciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJ
fQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1
aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luSW1hZ2UyOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxp
Z25lZF9pbnN0cmVhbV9pbkltYWdlMjsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291
bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX2luSW1hZ2UyOwoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNv
dW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UyLCBpbnRlcmZhY2Vf
YWN0aW9ucy0+aW5zdHJlYW1faW5JbWFnZTIsIGluc3RyZWFtX3NpemVfaW5JbWFnZTIpOwoJCQlz
dHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlMjsKCQl9CgkJbWF4X3F1ZXVlX2lu
cHV0KGFjdGlvbnMsICJpbkltYWdlMiIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfaW5JbWFn
ZTIpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5JbWFn
ZTIgKi8KCQoJaW50NjRfdCB0bXBfMiA9IChwYXJhbV9OICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0
cmVhbSBpbkltYWdlMyAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfaW5JbWFnZTMgPSB0bXBfMjsK
CWlmIChpbnN0cmVhbV9zaXplX2luSW1hZ2UzID4gMCkgewoJCWNvbnN0IGludDMyX3QgKnN0cmVh
bV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5JbWFnZTM7CgkJaWYgKHVzZV9j
YWxsYmFjayAmJiAoMSA9PSBCcmlnaHRuZXNzX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlv
bnMtPmluc3RyZWFtX2luSW1hZ2UzKSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9pbnN0cmVhbV9p
bkltYWdlMyA9IG1hbGxvYyhpbnN0cmVhbV9zaXplX2luSW1hZ2UzKTsKCQkJaWYgKGFsaWduZWRf
aW5zdHJlYW1faW5JbWFnZTMgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFj
dGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2Nh
dGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnaW5JbWFnZTMnIik7CgkJCQlDSEVDS19FUlJP
UlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIg
ICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbkltYWdlMzsKCQkJ
KCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhf
dCopIGFsaWduZWRfaW5zdHJlYW1faW5JbWFnZTM7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6ZV9pbkltYWdlMzsKCQkJKCZj
Yl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAwOwoJCQljYl9k
YXRhLT5jb3VudCArPSAxOwoJCQltZW1jcHkoYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlMywgaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luSW1hZ2UzLCBpbnN0cmVhbV9zaXplX2luSW1hZ2Uz
KTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfaW5zdHJlYW1faW5JbWFnZTM7CgkJfQoJCW1heF9x
dWV1ZV9pbnB1dChhY3Rpb25zLCAiaW5JbWFnZTMiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXpl
X2luSW1hZ2UzKTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFt
IGluSW1hZ2UzICovCgkKCWludDY0X3QgdG1wXzMgPSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2Rl
IGZvciBzdHJlYW0gb3V0SW1hZ2UxICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfb3V0SW1hZ2Ux
ID0gdG1wXzM7CglpZiAob3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UxID4gMCkgewoJCWludDMyX3Qg
KnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dEltYWdlMTsKCQlp
ZiAodXNlX2NhbGxiYWNrICYmICgxID09IEJyaWdodG5lc3NfY2hlY2tfYWxpZ25lZChpbnRlcmZh
Y2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dEltYWdlMSkpKSB7CgkJCWludDMyX3QgKmFsaWduZWRf
b3V0c3RyZWFtX291dEltYWdlMSA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZTEpOwoJ
CQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2UxID09IE5VTEwpIHsKCQkJCW1heF9yZXBv
cnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAi
RmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ291dEltYWdlMSci
KTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0
cmVhbV9vdXRJbWFnZTE7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFs
aWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZTE7CgkJCSgm
Y2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFt
X3NpemVfb3V0SW1hZ2UxOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5p
c19vdXRwdXQgICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBh
bGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZTE7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9u
cywgIm91dEltYWdlMSIsIHN0cmVhbV9wdHIsIG91dHN0cmVhbV9zaXplX291dEltYWdlMSk7CgkJ
Q0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBvdXRJbWFnZTEgKi8K
CQoJaW50NjRfdCB0bXBfNCA9IChwYXJhbV9OICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBv
dXRJbWFnZTIgKi8KCXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZTIgPSB0bXBfNDsKCWlm
IChvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZTIgPiAwKSB7CgkJaW50MzJfdCAqc3RyZWFtX3B0ciA9
IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fb3V0SW1hZ2UyOwoJCWlmICh1c2VfY2FsbGJh
Y2sgJiYgKDEgPT0gQnJpZ2h0bmVzc19jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5v
dXRzdHJlYW1fb3V0SW1hZ2UyKSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9vdXRzdHJlYW1fb3V0
SW1hZ2UyID0gbWFsbG9jKG91dHN0cmVhbV9zaXplX291dEltYWdlMik7CgkJCWlmIChhbGlnbmVk
X291dHN0cmVhbV9vdXRJbWFnZTIgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGlj
KGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxs
b2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnb3V0SW1hZ2UyJyIpOwoJCQkJQ0hFQ0tf
RVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJf
cHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dEltYWdl
MjsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAo
dWludDhfdCopIGFsaWduZWRfb3V0c3RyZWFtX291dEltYWdlMjsKCQkJKCZjYl9kYXRhLT5zdHJl
YW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJlYW1fc2l6ZV9vdXRJbWFn
ZTI7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0g
MTsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfb3V0c3Ry
ZWFtX291dEltYWdlMjsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAib3V0SW1hZ2Uy
Iiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UyKTsKCQlDSEVDS19FUlJPUlM7
Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIG91dEltYWdlMiAqLwoJCglpbnQ2NF90IHRt
cF81ID0gKHBhcmFtX04gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIG91dEltYWdlMyAqLwoJ
c2l6ZV90IG91dHN0cmVhbV9zaXplX291dEltYWdlMyA9IHRtcF81OwoJaWYgKG91dHN0cmVhbV9z
aXplX291dEltYWdlMyA+IDApIHsKCQlpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2Fj
dGlvbnMtPm91dHN0cmVhbV9vdXRJbWFnZTM7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBC
cmlnaHRuZXNzX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRJ
bWFnZTMpKSkgewoJCQlpbnQzMl90ICphbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZTMgPSBtYWxs
b2Mob3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UzKTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFtX291
dEltYWdlMyA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJy
b3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVk
IG1lbW9yeSBmb3Igc3RyZWFtICdvdXRJbWFnZTMnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0K
CQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWlu
dDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fb3V0SW1hZ2UzOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxp
Z25lZF9vdXRzdHJlYW1fb3V0SW1hZ2UzOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVhbV9zaXplX291dEltYWdlMzsKCQkJKCZjYl9k
YXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRh
LT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fb3V0SW1hZ2Uz
OwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFjdGlvbnMsICJvdXRJbWFnZTMiLCBzdHJlYW1fcHRy
LCBvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZTMpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBv
ZiBjb2RlIGZvciBzdHJlYW0gb3V0SW1hZ2UzICovCgkKCWlmICh1c2VfY2FsbGJhY2sgJiYgY2Jf
ZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19kYXRhID0gTlVMTDsKCQkqY2FsbGJhY2tf
ZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJldHVybiBhY3Rpb25zOwojdW5kZWYg
Q0hFQ0tfRVJST1JTCn0KCnZvaWQgQnJpZ2h0bmVzcygKCWludDMyX3QgcGFyYW1fTiwKCWNvbnN0
IGludDMyX3QgKmluc3RyZWFtX2luSW1hZ2UxLAoJY29uc3QgaW50MzJfdCAqaW5zdHJlYW1faW5J
bWFnZTIsCgljb25zdCBpbnQzMl90ICppbnN0cmVhbV9pbkltYWdlMywKCWludDMyX3QgKm91dHN0
cmVhbV9vdXRJbWFnZTEsCglpbnQzMl90ICpvdXRzdHJlYW1fb3V0SW1hZ2UyLAoJaW50MzJfdCAq
b3V0c3RyZWFtX291dEltYWdlMykKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19p
bml0aWFsaXNlZCwgQnJpZ2h0bmVzc19zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9t
YXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IEJy
aWdodG5lc3Nfbm9uYmxvY2socGFyYW1fTiwgaW5zdHJlYW1faW5JbWFnZTEsIGluc3RyZWFtX2lu
SW1hZ2UyLCBpbnN0cmVhbV9pbkltYWdlMywgb3V0c3RyZWFtX291dEltYWdlMSwgb3V0c3RyZWFt
X291dEltYWdlMiwgb3V0c3RyZWFtX291dEltYWdlMyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJs
ZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkJyaWdo
dG5lc3Nfbm9uYmxvY2soCglpbnQzMl90IHBhcmFtX04sCgljb25zdCBpbnQzMl90ICppbnN0cmVh
bV9pbkltYWdlMSwKCWNvbnN0IGludDMyX3QgKmluc3RyZWFtX2luSW1hZ2UyLAoJY29uc3QgaW50
MzJfdCAqaW5zdHJlYW1faW5JbWFnZTMsCglpbnQzMl90ICpvdXRzdHJlYW1fb3V0SW1hZ2UxLAoJ
aW50MzJfdCAqb3V0c3RyZWFtX291dEltYWdlMiwKCWludDMyX3QgKm91dHN0cmVhbV9vdXRJbWFn
ZTMpCnsKCUJyaWdodG5lc3NfYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNl
X2FjdGlvbnMucGFyYW1fTiA9IHBhcmFtX047CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9p
bkltYWdlMSA9IGluc3RyZWFtX2luSW1hZ2UxOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1f
aW5JbWFnZTIgPSBpbnN0cmVhbV9pbkltYWdlMjsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFt
X2luSW1hZ2UzID0gaW5zdHJlYW1faW5JbWFnZTM7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJl
YW1fb3V0SW1hZ2UxID0gb3V0c3RyZWFtX291dEltYWdlMTsKCWludGVyZmFjZV9hY3Rpb25zLm91
dHN0cmVhbV9vdXRJbWFnZTIgPSBvdXRzdHJlYW1fb3V0SW1hZ2UyOwoJaW50ZXJmYWNlX2FjdGlv
bnMub3V0c3RyZWFtX291dEltYWdlMyA9IG91dHN0cmVhbV9vdXRJbWFnZTM7Cgkodm9pZCkgcHRo
cmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBCcmlnaHRuZXNzX3N0YXRpY19pbml0
KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwg
TlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAg
ICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEJyaWdodG5lc3NfY29udmVy
dF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVu
YywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlv
bnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rp
b25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9y
dW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxv
Y2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9u
YmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsK
CX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVD
S19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJ
cmV0dXJuIHJ1bjsKfQoKdm9pZCBCcmlnaHRuZXNzX3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5l
LAoJQnJpZ2h0bmVzc19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3Qg
KnJ1biA9IEJyaWdodG5lc3NfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMp
OwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQo
cnVuKTsKfQoKbWF4X3J1bl90ICpCcmlnaHRuZXNzX3J1bl9ub25ibG9jaygKCW1heF9lbmdpbmVf
dCAqZW5naW5lLAoJQnJpZ2h0bmVzc19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cglt
YXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgl2
b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBO
VUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEJyaWdodG5lc3NfY29udmVydF9pbnRlcm5h
bChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNI
RUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1
bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsK
CX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9u
cywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4g
YWN0aW9ucyIsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47
Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9y
IHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAg
dG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBy
dW4uCiAqCiAqIFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBp
biB0aGUgZ3JvdXAuCiAqLwp2b2lkIEJyaWdodG5lc3NfcnVuX2dyb3VwKG1heF9ncm91cF90ICpn
cm91cCwgQnJpZ2h0bmVzc19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVu
X3QgKnJ1biA9IEJyaWdodG5lc3NfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2Vf
YWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7Cglt
YXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGlj
IG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAog
KgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFp
bGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMg
b2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0
IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5u
aW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1l
bnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3Jv
dXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1
bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0
aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpCcmlnaHRuZXNz
X3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIEJyaWdodG5lc3NfYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91
cF9nZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEJyaWdodG5l
c3NfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwg
TlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rp
b25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9y
dW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhf
YWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJy
YXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVs
dCcuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1
c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0
aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkg
b2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRj
aCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgQnJpZ2h0bmVzc19ydW5fYXJyYXkobWF4
X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBCcmlnaHRuZXNzX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2Fj
dGlvbnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBCcmlnaHRuZXNzX3J1bl9hcnJheV9ub25ibG9j
ayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUg
dG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJy
YXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRl
cmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBh
Y3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5Lgog
KiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2Yg
ZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIg
YnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2Ug
Km11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFz
ZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVz
ZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMg
dG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRo
ZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkJyaWdo
dG5lc3NfcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgQnJpZ2h0
bmVzc19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZp
bGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4
X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJy
YXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlv
bnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9h
Y3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJ
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBCcmlnaHRuZXNzX2NvbnZlcnRfaW50ZXJuYWwobWF4
ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rpb25z
ID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQltYXhf
c2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1h
eF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAwIDsg
aSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rpb25z
W2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9ucyk7
CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRlcmZh
Y2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNfdCBz
dHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVuY3Rp
b24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAqCiAq
IFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2luXSBp
bnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVuLgog
KiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVMTCBp
biBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogQnJpZ2h0bmVzc19jb252ZXJ0KG1h
eF9maWxlX3QgKm1heGZpbGUsIEJyaWdodG5lc3NfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
cykKewoJcmV0dXJuIEJyaWdodG5lc3NfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZh
Y2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3Vu
ZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(BrightnessKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 47, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 52, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 4, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 57, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(BrightnessKernel, 69, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c021463fb9d9e7f3fe7282fba7efe68e653650cab8bc4021451bb73e8ebf8cd6a80f9f583ada800da043974de")
#endif

